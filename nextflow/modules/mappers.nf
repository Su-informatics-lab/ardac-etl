#!/usr/bin/env nextflow

include { mapSubjectsTypeToCaseNodeFile } from './utilities.nf'
include { mapSubjectsTypeToDemographicNodeFile } from './utilities.nf'
include { mapSubjectsTypeToFollowupNodeFile } from './utilities.nf'
include { mapSubjectsTypeToFollowupQCFile } from './utilities.nf'


/*
 * Get the DCC version that the mapping utilities support
 */
process GET_MAPPER_DCC_VERSION {
   output:
      path 'maper_dcc_version.txt', emit: mapper_dcc_version

   script:
   """
   python case_node_maper.py --dcc_version > mapper_dcc_version.txt 
   """
}

/*
 * Generate a case node from observational or clinical trial DCC subject data
 * provided in CSV format files.
 */
process CASE_NODE_MAPPER {

    //publishDir params.output, mode: 'symlink'

    input:
        // Path to directory containing node template files
        path node_templates_path
        // Path to the DCC subject file
        path dcc_subjects_file 
        // Path to the output directory
        path node_output_path
        // The subjects type
        val subjects_type

    output:
        path("${node_output_path}/" + mapSubjectsTypeToCaseNodeFile(subjects_type)), emit: case_node_file
        
    script:
    """
    python case_node_maper.py \
       --log_level ${params.python_log_level} \
       --node_templates_path ${node_templates_path} \
       --subjects-type ${subjects_type} \
       --dcc_subjects_file ${dcc_subjects_file} \
       --node_output_path ${node_output_path}
    """
}

/*
 * Generate a demographic node from observational or clinical trial subject data
 * and the ARDaC case node files.
 */
 process DEMOGRAPHIC_NODE_MAPPER {
   input:
      // Path to directory containing node template files
      path node_templates_path
      // Path to the DCC subject file
      path dcc_subjects_file 
      // Path to the output directory
      path node_output_path
      // The subjects type
      val subjects_type
      // The ARDaC case node file generated by CASE_NODE_MAPPER
      path case_node_file

   output:
      path("${node_output_path}/" + mapSubjectsTypeToDemographicNodeFile(subjects_type)), emit: demographic_node_file

   script:
   """
   python demographic_node_mapper.py \
       --log_level ${params.python_log_level} \
       --node_templates_path ${node_templates_path} \
       --subjects-type ${subjects_type} \
       --dcc_subjects_file ${dcc_subjects_file} \
       --node_output_path ${node_output_path}
   """
 }

 /*
 * Generate a follow-up node from observational or clinical trial subject data
 * and the ARDaC case node files.
 */
 process FOLLOWUP_NODE_MAPPER {
   input:
      // Path to directory containing node template files
      path node_templates_path
      // Path to the DCC subject file
      path dcc_subjects_file 
      // Path to the DCC liver scores file
      path dcc_liver_scores_file
      // Path to the DCC med info file
      path dcc_med_info_file
      // Path to the DCC vitals file
      path dcc_vitals_file
      // Path to the DCC soc file
      path dcc_soc_file
      // Path to the output directory
      path node_output_path
      // The subjects type
      val subjects_type
      // The ARDaC case node file generated by CASE_NODE_MAPPER
      path case_node_file

   output:
      path("${node_output_path}/" + mapSubjectsTypeToFollowupNodeFile(subjects_type)), emit: followup_node_file
      path("${node_output_path}/" + mapSubjectsTypeToFollowupQCFile(subjects_type)), emit: followup_qc_file

   script:
   """
   follow_up_node_mapper.py \
       --log_level ${params.python_log_level} \
       --node_templates_path ${node_templates_path} \
       --subjects-type ${subjects_type} \
       --dcc_subjects_file ${dcc_subjects_file} \
       --dcc_liver_scores_file ${dcc_liver_scores_file} \
       --dcc_med_info_file ${dcc_med_info_file} \
       --dcc_vitals_file ${dcc_vitals_file} \
       --dcc_soc_file ${dcc_soc_file} \
       --node_output_path ${node_output_path}
   """
 }